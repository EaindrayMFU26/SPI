
blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002464  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002610  08002610  00003610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002620  08002620  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002620  08002620  00003620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002628  08002628  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002628  08002628  00003628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800262c  0800262c  0000362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002630  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000080  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000008c  2000008c  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000061f0  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000140c  00000000  00000000  0000a22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  0000b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c5  00000000  00000000  0000bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ba3  00000000  00000000  0000c16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007645  00000000  00000000  0002dd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd4c1  00000000  00000000  00035355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102816  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018e0  00000000  00000000  0010285c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0010413c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080025f8 	.word	0x080025f8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080025f8 	.word	0x080025f8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2108      	movs	r1, #8
 8000526:	480d      	ldr	r0, [pc, #52]	@ (800055c <HAL_GPIO_EXTI_Callback+0x44>)
 8000528:	f000 fd82 	bl	8001030 <HAL_GPIO_WritePin>
  spi_tx_buf[0]= 0x29 | 0x80;
 800052c:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <HAL_GPIO_EXTI_Callback+0x48>)
 800052e:	22a9      	movs	r2, #169	@ 0xa9
 8000530:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi1, spi_tx_buf,1,10); //10ms
 8000532:	230a      	movs	r3, #10
 8000534:	2201      	movs	r2, #1
 8000536:	490a      	ldr	r1, [pc, #40]	@ (8000560 <HAL_GPIO_EXTI_Callback+0x48>)
 8000538:	480a      	ldr	r0, [pc, #40]	@ (8000564 <HAL_GPIO_EXTI_Callback+0x4c>)
 800053a:	f001 fae8 	bl	8001b0e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, spi_rx_buf,1,10); //10ms
 800053e:	230a      	movs	r3, #10
 8000540:	2201      	movs	r2, #1
 8000542:	4909      	ldr	r1, [pc, #36]	@ (8000568 <HAL_GPIO_EXTI_Callback+0x50>)
 8000544:	4807      	ldr	r0, [pc, #28]	@ (8000564 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000546:	f001 fc26 	bl	8001d96 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2108      	movs	r1, #8
 800054e:	4803      	ldr	r0, [pc, #12]	@ (800055c <HAL_GPIO_EXTI_Callback+0x44>)
 8000550:	f000 fd6e 	bl	8001030 <HAL_GPIO_WritePin>

  //toggle led

}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	20000080 	.word	0x20000080
 8000564:	20000028 	.word	0x20000028
 8000568:	20000084 	.word	0x20000084

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fa2e 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f838 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8dc 	bl	8000734 <MX_GPIO_Init>
  MX_SPI1_Init();
 800057c:	f000 f8a4 	bl	80006c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2108      	movs	r1, #8
 8000584:	4815      	ldr	r0, [pc, #84]	@ (80005dc <main+0x70>)
 8000586:	f000 fd53 	bl	8001030 <HAL_GPIO_WritePin>
  spi_tx_buf[0]= 0x20;
 800058a:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <main+0x74>)
 800058c:	2220      	movs	r2, #32
 800058e:	701a      	strb	r2, [r3, #0]
  spi_tx_buf[1]= 0x91;
 8000590:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <main+0x74>)
 8000592:	2291      	movs	r2, #145	@ 0x91
 8000594:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit(&hspi1, spi_tx_buf,2,10); //10ms
 8000596:	230a      	movs	r3, #10
 8000598:	2202      	movs	r2, #2
 800059a:	4911      	ldr	r1, [pc, #68]	@ (80005e0 <main+0x74>)
 800059c:	4811      	ldr	r0, [pc, #68]	@ (80005e4 <main+0x78>)
 800059e:	f001 fab6 	bl	8001b0e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2108      	movs	r1, #8
 80005a6:	480d      	ldr	r0, [pc, #52]	@ (80005dc <main+0x70>)
 80005a8:	f000 fd42 	bl	8001030 <HAL_GPIO_WritePin>

  //Interrupt
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2108      	movs	r1, #8
 80005b0:	480a      	ldr	r0, [pc, #40]	@ (80005dc <main+0x70>)
 80005b2:	f000 fd3d 	bl	8001030 <HAL_GPIO_WritePin>
  spi_tx_buf[0]= 0x23;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <main+0x74>)
 80005b8:	2223      	movs	r2, #35	@ 0x23
 80005ba:	701a      	strb	r2, [r3, #0]
  spi_tx_buf[1]= 0xC8;
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <main+0x74>)
 80005be:	22c8      	movs	r2, #200	@ 0xc8
 80005c0:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit(&hspi1, spi_tx_buf,2,10); //10ms
 80005c2:	230a      	movs	r3, #10
 80005c4:	2202      	movs	r2, #2
 80005c6:	4906      	ldr	r1, [pc, #24]	@ (80005e0 <main+0x74>)
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <main+0x78>)
 80005ca:	f001 faa0 	bl	8001b0e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2108      	movs	r1, #8
 80005d2:	4802      	ldr	r0, [pc, #8]	@ (80005dc <main+0x70>)
 80005d4:	f000 fd2c 	bl	8001030 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <main+0x6c>
 80005dc:	40021000 	.word	0x40021000
 80005e0:	20000080 	.word	0x20000080
 80005e4:	20000028 	.word	0x20000028

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 ffd2 	bl	80025a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <SystemClock_Config+0xd8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a2a      	ldr	r2, [pc, #168]	@ (80006c0 <SystemClock_Config+0xd8>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <SystemClock_Config+0xd8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <SystemClock_Config+0xdc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <SystemClock_Config+0xdc>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <SystemClock_Config+0xdc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800065c:	23b4      	movs	r3, #180	@ 0xb4
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000664:	2303      	movs	r3, #3
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fd61 	bl	8001134 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f8c2 	bl	8000800 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800067c:	f000 fd0a 	bl	8001094 <HAL_PWREx_EnableOverDrive>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000686:	f000 f8bb 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2105      	movs	r1, #5
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 ffbb 	bl	8001624 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b4:	f000 f8a4 	bl	8000800 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	@ 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_SPI1_Init+0x64>)
 80006ce:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <MX_SPI1_Init+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_SPI1_Init+0x64>)
 80006f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_SPI1_Init+0x64>)
 8000714:	220a      	movs	r2, #10
 8000716:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_SPI1_Init+0x64>)
 800071a:	f001 f96f 	bl	80019fc <HAL_SPI_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000724:	f000 f86c 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000028 	.word	0x20000028
 8000730:	40013000 	.word	0x40013000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a29      	ldr	r2, [pc, #164]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a1b      	ldr	r2, [pc, #108]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2108      	movs	r1, #8
 80007a2:	4816      	ldr	r0, [pc, #88]	@ (80007fc <MX_GPIO_Init+0xc8>)
 80007a4:	f000 fc44 	bl	8001030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007a8:	2308      	movs	r3, #8
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	480f      	ldr	r0, [pc, #60]	@ (80007fc <MX_GPIO_Init+0xc8>)
 80007c0:	f000 fa8a 	bl	8000cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <MX_GPIO_Init+0xc8>)
 80007da:	f000 fa7d 	bl	8000cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2006      	movs	r0, #6
 80007e4:	f000 fa41 	bl	8000c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007e8:	2006      	movs	r0, #6
 80007ea:	f000 fa5a 	bl	8000ca2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40021000 	.word	0x40021000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	@ (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000820:	6453      	str	r3, [r2, #68]	@ 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	@ 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <HAL_SPI_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12b      	bne.n	80008d6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <HAL_SPI_MspInit+0x88>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <HAL_SPI_MspInit+0x88>)
 8000888:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_SPI_MspInit+0x88>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <HAL_SPI_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <HAL_SPI_MspInit+0x88>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_SPI_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008b6:	23e0      	movs	r3, #224	@ 0xe0
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c6:	2305      	movs	r3, #5
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <HAL_SPI_MspInit+0x8c>)
 80008d2:	f000 fa01 	bl	8000cd8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	@ 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40013000 	.word	0x40013000
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f897 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}

0800094a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fb88 	bl	8001064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f001 fe01 	bl	80025b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fddd 	bl	800056c <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c0:	08002630 	.word	0x08002630
  ldr r2, =_sbss
 80009c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c8:	2000008c 	.word	0x2000008c

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f92b 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff ff02 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f943 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f90b 	bl	8000c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	@ (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000088 	.word	0x20000088

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000088 	.word	0x20000088

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0b      	blt.n	8000b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	4907      	ldr	r1, [pc, #28]	@ (8000b50 <__NVIC_EnableIRQ+0x38>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	@ (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	@ (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	@ 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	@ 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff8e 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff29 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff3e 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff8e 	bl	8000ba8 <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5d 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff31 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffa2 	bl	8000c10 <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	e177      	b.n	8000fe4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	f040 8166 	bne.w	8000fde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d005      	beq.n	8000d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d130      	bne.n	8000d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2203      	movs	r2, #3
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d60:	2201      	movs	r2, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	091b      	lsrs	r3, r3, #4
 8000d76:	f003 0201 	and.w	r2, r3, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d017      	beq.n	8000dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d123      	bne.n	8000e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	220f      	movs	r2, #15
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3208      	adds	r2, #8
 8000e16:	69b9      	ldr	r1, [r7, #24]
 8000e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0203 	and.w	r2, r3, #3
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80c0 	beq.w	8000fde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b66      	ldr	r3, [pc, #408]	@ (8000ffc <HAL_GPIO_Init+0x324>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a65      	ldr	r2, [pc, #404]	@ (8000ffc <HAL_GPIO_Init+0x324>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b63      	ldr	r3, [pc, #396]	@ (8000ffc <HAL_GPIO_Init+0x324>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e7a:	4a61      	ldr	r2, [pc, #388]	@ (8001000 <HAL_GPIO_Init+0x328>)
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a58      	ldr	r2, [pc, #352]	@ (8001004 <HAL_GPIO_Init+0x32c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d037      	beq.n	8000f16 <HAL_GPIO_Init+0x23e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a57      	ldr	r2, [pc, #348]	@ (8001008 <HAL_GPIO_Init+0x330>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d031      	beq.n	8000f12 <HAL_GPIO_Init+0x23a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a56      	ldr	r2, [pc, #344]	@ (800100c <HAL_GPIO_Init+0x334>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d02b      	beq.n	8000f0e <HAL_GPIO_Init+0x236>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a55      	ldr	r2, [pc, #340]	@ (8001010 <HAL_GPIO_Init+0x338>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d025      	beq.n	8000f0a <HAL_GPIO_Init+0x232>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a54      	ldr	r2, [pc, #336]	@ (8001014 <HAL_GPIO_Init+0x33c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01f      	beq.n	8000f06 <HAL_GPIO_Init+0x22e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a53      	ldr	r2, [pc, #332]	@ (8001018 <HAL_GPIO_Init+0x340>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x22a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a52      	ldr	r2, [pc, #328]	@ (800101c <HAL_GPIO_Init+0x344>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x226>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a51      	ldr	r2, [pc, #324]	@ (8001020 <HAL_GPIO_Init+0x348>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x222>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a50      	ldr	r2, [pc, #320]	@ (8001024 <HAL_GPIO_Init+0x34c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x21e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4f      	ldr	r2, [pc, #316]	@ (8001028 <HAL_GPIO_Init+0x350>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x21a>
 8000eee:	2309      	movs	r3, #9
 8000ef0:	e012      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	e010      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	e00e      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000efa:	2307      	movs	r3, #7
 8000efc:	e00c      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000efe:	2306      	movs	r3, #6
 8000f00:	e00a      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x240>
 8000f16:	2300      	movs	r3, #0
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	f002 0203 	and.w	r2, r2, #3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f28:	4935      	ldr	r1, [pc, #212]	@ (8001000 <HAL_GPIO_Init+0x328>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b3d      	ldr	r3, [pc, #244]	@ (800102c <HAL_GPIO_Init+0x354>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5a:	4a34      	ldr	r2, [pc, #208]	@ (800102c <HAL_GPIO_Init+0x354>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f60:	4b32      	ldr	r3, [pc, #200]	@ (800102c <HAL_GPIO_Init+0x354>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f84:	4a29      	ldr	r2, [pc, #164]	@ (800102c <HAL_GPIO_Init+0x354>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8a:	4b28      	ldr	r3, [pc, #160]	@ (800102c <HAL_GPIO_Init+0x354>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fae:	4a1f      	ldr	r2, [pc, #124]	@ (800102c <HAL_GPIO_Init+0x354>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <HAL_GPIO_Init+0x354>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	@ (800102c <HAL_GPIO_Init+0x354>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	f67f ae84 	bls.w	8000cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40013800 	.word	0x40013800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	40020800 	.word	0x40020800
 8001010:	40020c00 	.word	0x40020c00
 8001014:	40021000 	.word	0x40021000
 8001018:	40021400 	.word	0x40021400
 800101c:	40021800 	.word	0x40021800
 8001020:	40021c00 	.word	0x40021c00
 8001024:	40022000 	.word	0x40022000
 8001028:	40022400 	.word	0x40022400
 800102c:	40013c00 	.word	0x40013c00

08001030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001040:	787b      	ldrb	r3, [r7, #1]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800104c:	e003      	b.n	8001056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	041a      	lsls	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800107a:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa48 	bl	8000518 <HAL_GPIO_EXTI_Callback>
  }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40013c00 	.word	0x40013c00

08001094 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <HAL_PWREx_EnableOverDrive+0x90>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001124 <HAL_PWREx_EnableOverDrive+0x90>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <HAL_PWREx_EnableOverDrive+0x90>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <HAL_PWREx_EnableOverDrive+0x94>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c0:	f7ff fcec 	bl	8000a9c <HAL_GetTick>
 80010c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010c6:	e009      	b.n	80010dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010c8:	f7ff fce8 	bl	8000a9c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010d6:	d901      	bls.n	80010dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e01f      	b.n	800111c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_PWREx_EnableOverDrive+0x98>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e8:	d1ee      	bne.n	80010c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff fcd4 	bl	8000a9c <HAL_GetTick>
 80010f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010f6:	e009      	b.n	800110c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010f8:	f7ff fcd0 	bl	8000a9c <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001106:	d901      	bls.n	800110c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e007      	b.n	800111c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <HAL_PWREx_EnableOverDrive+0x98>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001114:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001118:	d1ee      	bne.n	80010f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	420e0040 	.word	0x420e0040
 800112c:	40007000 	.word	0x40007000
 8001130:	420e0044 	.word	0x420e0044

08001134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e267      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d075      	beq.n	800123e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001152:	4b88      	ldr	r3, [pc, #544]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d00c      	beq.n	8001178 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115e:	4b85      	ldr	r3, [pc, #532]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001166:	2b08      	cmp	r3, #8
 8001168:	d112      	bne.n	8001190 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116a:	4b82      	ldr	r3, [pc, #520]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001176:	d10b      	bne.n	8001190 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	4b7e      	ldr	r3, [pc, #504]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d05b      	beq.n	800123c <HAL_RCC_OscConfig+0x108>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d157      	bne.n	800123c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e242      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001198:	d106      	bne.n	80011a8 <HAL_RCC_OscConfig+0x74>
 800119a:	4b76      	ldr	r3, [pc, #472]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a75      	ldr	r2, [pc, #468]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e01d      	b.n	80011e4 <HAL_RCC_OscConfig+0xb0>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x98>
 80011b2:	4b70      	ldr	r3, [pc, #448]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b6d      	ldr	r3, [pc, #436]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e00b      	b.n	80011e4 <HAL_RCC_OscConfig+0xb0>
 80011cc:	4b69      	ldr	r3, [pc, #420]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a68      	ldr	r2, [pc, #416]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b66      	ldr	r3, [pc, #408]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a65      	ldr	r2, [pc, #404]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc56 	bl	8000a9c <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fc52 	bl	8000a9c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	@ 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e207      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4b5b      	ldr	r3, [pc, #364]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0xc0>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fc42 	bl	8000a9c <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fc3e 	bl	8000a9c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	@ 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1f3      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	4b51      	ldr	r3, [pc, #324]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0xe8>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d063      	beq.n	8001312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800124a:	4b4a      	ldr	r3, [pc, #296]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00b      	beq.n	800126e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001256:	4b47      	ldr	r3, [pc, #284]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800125e:	2b08      	cmp	r3, #8
 8001260:	d11c      	bne.n	800129c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001262:	4b44      	ldr	r3, [pc, #272]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d116      	bne.n	800129c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <HAL_RCC_OscConfig+0x152>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d001      	beq.n	8001286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e1c7      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4937      	ldr	r1, [pc, #220]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	e03a      	b.n	8001312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a4:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <HAL_RCC_OscConfig+0x244>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fbf7 	bl	8000a9c <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fbf3 	bl	8000a9c <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e1a8      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4925      	ldr	r1, [pc, #148]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_RCC_OscConfig+0x244>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fbd6 	bl	8000a9c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f4:	f7ff fbd2 	bl	8000a9c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e187      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d036      	beq.n	800138c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d016      	beq.n	8001354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <HAL_RCC_OscConfig+0x248>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff fbb6 	bl	8000a9c <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fbb2 	bl	8000a9c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e167      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <HAL_RCC_OscConfig+0x240>)
 8001348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x200>
 8001352:	e01b      	b.n	800138c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <HAL_RCC_OscConfig+0x248>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb9f 	bl	8000a9c <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	e00e      	b.n	8001380 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001362:	f7ff fb9b 	bl	8000a9c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d907      	bls.n	8001380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e150      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
 8001374:	40023800 	.word	0x40023800
 8001378:	42470000 	.word	0x42470000
 800137c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	4b88      	ldr	r3, [pc, #544]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1ea      	bne.n	8001362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8097 	beq.w	80014c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139e:	4b81      	ldr	r3, [pc, #516]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b7d      	ldr	r3, [pc, #500]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a7c      	ldr	r2, [pc, #496]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b7a      	ldr	r3, [pc, #488]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b77      	ldr	r3, [pc, #476]	@ (80015a8 <HAL_RCC_OscConfig+0x474>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d118      	bne.n	8001408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b74      	ldr	r3, [pc, #464]	@ (80015a8 <HAL_RCC_OscConfig+0x474>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a73      	ldr	r2, [pc, #460]	@ (80015a8 <HAL_RCC_OscConfig+0x474>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb5b 	bl	8000a9c <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ea:	f7ff fb57 	bl	8000a9c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e10c      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	4b6a      	ldr	r3, [pc, #424]	@ (80015a8 <HAL_RCC_OscConfig+0x474>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x2ea>
 8001410:	4b64      	ldr	r3, [pc, #400]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001414:	4a63      	ldr	r2, [pc, #396]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6713      	str	r3, [r2, #112]	@ 0x70
 800141c:	e01c      	b.n	8001458 <HAL_RCC_OscConfig+0x324>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b05      	cmp	r3, #5
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x30c>
 8001426:	4b5f      	ldr	r3, [pc, #380]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800142a:	4a5e      	ldr	r2, [pc, #376]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6713      	str	r3, [r2, #112]	@ 0x70
 8001432:	4b5c      	ldr	r3, [pc, #368]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001436:	4a5b      	ldr	r2, [pc, #364]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6713      	str	r3, [r2, #112]	@ 0x70
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0x324>
 8001440:	4b58      	ldr	r3, [pc, #352]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001444:	4a57      	ldr	r2, [pc, #348]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	6713      	str	r3, [r2, #112]	@ 0x70
 800144c:	4b55      	ldr	r3, [pc, #340]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001450:	4a54      	ldr	r2, [pc, #336]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001452:	f023 0304 	bic.w	r3, r3, #4
 8001456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d015      	beq.n	800148c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001460:	f7ff fb1c 	bl	8000a9c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001466:	e00a      	b.n	800147e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7ff fb18 	bl	8000a9c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0cb      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147e:	4b49      	ldr	r3, [pc, #292]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0ee      	beq.n	8001468 <HAL_RCC_OscConfig+0x334>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff fb06 	bl	8000a9c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001492:	e00a      	b.n	80014aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001494:	f7ff fb02 	bl	8000a9c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e0b5      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014aa:	4b3e      	ldr	r3, [pc, #248]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ee      	bne.n	8001494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d105      	bne.n	80014c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014bc:	4b39      	ldr	r3, [pc, #228]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	4a38      	ldr	r2, [pc, #224]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 80014c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80a1 	beq.w	8001614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014d2:	4b34      	ldr	r3, [pc, #208]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d05c      	beq.n	8001598 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d141      	bne.n	800156a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <HAL_RCC_OscConfig+0x478>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fad6 	bl	8000a9c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fad2 	bl	8000a9c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e087      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69da      	ldr	r2, [r3, #28]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	085b      	lsrs	r3, r3, #1
 800152a:	3b01      	subs	r3, #1
 800152c:	041b      	lsls	r3, r3, #16
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	491b      	ldr	r1, [pc, #108]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <HAL_RCC_OscConfig+0x478>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff faab 	bl	8000a9c <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff faa7 	bl	8000a9c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e05c      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x416>
 8001568:	e054      	b.n	8001614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <HAL_RCC_OscConfig+0x478>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fa94 	bl	8000a9c <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fa90 	bl	8000a9c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e045      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_RCC_OscConfig+0x470>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x444>
 8001596:	e03d      	b.n	8001614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d107      	bne.n	80015b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e038      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000
 80015ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <HAL_RCC_OscConfig+0x4ec>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d028      	beq.n	8001610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d121      	bne.n	8001610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d11a      	bne.n	8001610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015e0:	4013      	ands	r3, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d111      	bne.n	8001610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f6:	085b      	lsrs	r3, r3, #1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0cc      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001638:	4b68      	ldr	r3, [pc, #416]	@ (80017dc <HAL_RCC_ClockConfig+0x1b8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d90c      	bls.n	8001660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b65      	ldr	r3, [pc, #404]	@ (80017dc <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b63      	ldr	r3, [pc, #396]	@ (80017dc <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0b8      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d020      	beq.n	80016ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001678:	4b59      	ldr	r3, [pc, #356]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4a58      	ldr	r2, [pc, #352]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001682:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001690:	4b53      	ldr	r3, [pc, #332]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a52      	ldr	r2, [pc, #328]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800169a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169c:	4b50      	ldr	r3, [pc, #320]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	494d      	ldr	r1, [pc, #308]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d044      	beq.n	8001744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b47      	ldr	r3, [pc, #284]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d119      	bne.n	8001702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e07f      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d003      	beq.n	80016e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e2:	4b3f      	ldr	r3, [pc, #252]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e06f      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f2:	4b3b      	ldr	r3, [pc, #236]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e067      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001702:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f023 0203 	bic.w	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4934      	ldr	r1, [pc, #208]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001714:	f7ff f9c2 	bl	8000a9c <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	e00a      	b.n	8001732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171c:	f7ff f9be 	bl	8000a9c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e04f      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	4b2b      	ldr	r3, [pc, #172]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 020c 	and.w	r2, r3, #12
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	429a      	cmp	r2, r3
 8001742:	d1eb      	bne.n	800171c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001744:	4b25      	ldr	r3, [pc, #148]	@ (80017dc <HAL_RCC_ClockConfig+0x1b8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d20c      	bcs.n	800176c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e032      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4916      	ldr	r1, [pc, #88]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	490e      	ldr	r1, [pc, #56]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017aa:	f000 f821 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80017ae:	4602      	mov	r2, r0
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	490a      	ldr	r1, [pc, #40]	@ (80017e4 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	5ccb      	ldrb	r3, [r1, r3]
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f922 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00
 80017e0:	40023800 	.word	0x40023800
 80017e4:	08002610 	.word	0x08002610
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f4:	b094      	sub	sp, #80	@ 0x50
 80017f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001808:	4b79      	ldr	r3, [pc, #484]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d00d      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x40>
 8001814:	2b08      	cmp	r3, #8
 8001816:	f200 80e1 	bhi.w	80019dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x34>
 800181e:	2b04      	cmp	r3, #4
 8001820:	d003      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0x3a>
 8001822:	e0db      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001824:	4b73      	ldr	r3, [pc, #460]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001826:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001828:	e0db      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182a:	4b73      	ldr	r3, [pc, #460]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800182c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800182e:	e0d8      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001830:	4b6f      	ldr	r3, [pc, #444]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001838:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183a:	4b6d      	ldr	r3, [pc, #436]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d063      	beq.n	800190e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001846:	4b6a      	ldr	r3, [pc, #424]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	099b      	lsrs	r3, r3, #6
 800184c:	2200      	movs	r2, #0
 800184e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001850:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001858:	633b      	str	r3, [r7, #48]	@ 0x30
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	@ 0x34
 800185e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001862:	4622      	mov	r2, r4
 8001864:	462b      	mov	r3, r5
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	0159      	lsls	r1, r3, #5
 8001870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001874:	0150      	lsls	r0, r2, #5
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4621      	mov	r1, r4
 800187c:	1a51      	subs	r1, r2, r1
 800187e:	6139      	str	r1, [r7, #16]
 8001880:	4629      	mov	r1, r5
 8001882:	eb63 0301 	sbc.w	r3, r3, r1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001894:	4659      	mov	r1, fp
 8001896:	018b      	lsls	r3, r1, #6
 8001898:	4651      	mov	r1, sl
 800189a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189e:	4651      	mov	r1, sl
 80018a0:	018a      	lsls	r2, r1, #6
 80018a2:	4651      	mov	r1, sl
 80018a4:	ebb2 0801 	subs.w	r8, r2, r1
 80018a8:	4659      	mov	r1, fp
 80018aa:	eb63 0901 	sbc.w	r9, r3, r1
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c2:	4690      	mov	r8, r2
 80018c4:	4699      	mov	r9, r3
 80018c6:	4623      	mov	r3, r4
 80018c8:	eb18 0303 	adds.w	r3, r8, r3
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	462b      	mov	r3, r5
 80018d0:	eb49 0303 	adc.w	r3, r9, r3
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018e2:	4629      	mov	r1, r5
 80018e4:	024b      	lsls	r3, r1, #9
 80018e6:	4621      	mov	r1, r4
 80018e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018ec:	4621      	mov	r1, r4
 80018ee:	024a      	lsls	r2, r1, #9
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018f6:	2200      	movs	r2, #0
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001900:	f7fe fc74 	bl	80001ec <__aeabi_uldivmod>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4613      	mov	r3, r2
 800190a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800190c:	e058      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190e:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	099b      	lsrs	r3, r3, #6
 8001914:	2200      	movs	r2, #0
 8001916:	4618      	mov	r0, r3
 8001918:	4611      	mov	r1, r2
 800191a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
 8001924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001928:	4642      	mov	r2, r8
 800192a:	464b      	mov	r3, r9
 800192c:	f04f 0000 	mov.w	r0, #0
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	0159      	lsls	r1, r3, #5
 8001936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800193a:	0150      	lsls	r0, r2, #5
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4641      	mov	r1, r8
 8001942:	ebb2 0a01 	subs.w	sl, r2, r1
 8001946:	4649      	mov	r1, r9
 8001948:	eb63 0b01 	sbc.w	fp, r3, r1
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800195c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001960:	ebb2 040a 	subs.w	r4, r2, sl
 8001964:	eb63 050b 	sbc.w	r5, r3, fp
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	00eb      	lsls	r3, r5, #3
 8001972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001976:	00e2      	lsls	r2, r4, #3
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	4643      	mov	r3, r8
 800197e:	18e3      	adds	r3, r4, r3
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	464b      	mov	r3, r9
 8001984:	eb45 0303 	adc.w	r3, r5, r3
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001996:	4629      	mov	r1, r5
 8001998:	028b      	lsls	r3, r1, #10
 800199a:	4621      	mov	r1, r4
 800199c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a0:	4621      	mov	r1, r4
 80019a2:	028a      	lsls	r2, r1, #10
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019aa:	2200      	movs	r2, #0
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	61fa      	str	r2, [r7, #28]
 80019b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019b4:	f7fe fc1a 	bl	80001ec <__aeabi_uldivmod>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4613      	mov	r3, r2
 80019be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	3301      	adds	r3, #1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80019d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019da:	e002      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3750      	adds	r7, #80	@ 0x50
 80019e8:	46bd      	mov	sp, r7
 80019ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	00f42400 	.word	0x00f42400
 80019f8:	007a1200 	.word	0x007a1200

080019fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07b      	b.n	8001b06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a1e:	d009      	beq.n	8001a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
 8001a26:	e005      	b.n	8001a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe ff04 	bl	800085c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab8:	ea42 0103 	orr.w	r1, r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0104 	and.w	r1, r3, #4
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	f003 0210 	and.w	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001af4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b088      	sub	sp, #32
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b1e:	f7fe ffbd 	bl	8000a9c <HAL_GetTick>
 8001b22:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d001      	beq.n	8001b38 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001b34:	2302      	movs	r3, #2
 8001b36:	e12a      	b.n	8001d8e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_SPI_Transmit+0x36>
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e122      	b.n	8001d8e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_SPI_Transmit+0x48>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e11b      	b.n	8001d8e <HAL_SPI_Transmit+0x280>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2203      	movs	r2, #3
 8001b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd0:	2b40      	cmp	r3, #64	@ 0x40
 8001bd2:	d007      	beq.n	8001be4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bec:	d152      	bne.n	8001c94 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_SPI_Transmit+0xee>
 8001bf6:	8b7b      	ldrh	r3, [r7, #26]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d145      	bne.n	8001c88 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	1c9a      	adds	r2, r3, #2
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c20:	e032      	b.n	8001c88 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d112      	bne.n	8001c56 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	881a      	ldrh	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c40:	1c9a      	adds	r2, r3, #2
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001c54:	e018      	b.n	8001c88 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c56:	f7fe ff21 	bl	8000a9c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d803      	bhi.n	8001c6e <HAL_SPI_Transmit+0x160>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d102      	bne.n	8001c74 <HAL_SPI_Transmit+0x166>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e082      	b.n	8001d8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1c7      	bne.n	8001c22 <HAL_SPI_Transmit+0x114>
 8001c92:	e053      	b.n	8001d3c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_SPI_Transmit+0x194>
 8001c9c:	8b7b      	ldrh	r3, [r7, #26]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d147      	bne.n	8001d32 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	330c      	adds	r3, #12
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001cc8:	e033      	b.n	8001d32 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d113      	bne.n	8001d00 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001cfe:	e018      	b.n	8001d32 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d00:	f7fe fecc 	bl	8000a9c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d803      	bhi.n	8001d18 <HAL_SPI_Transmit+0x20a>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d16:	d102      	bne.n	8001d1e <HAL_SPI_Transmit+0x210>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e02d      	b.n	8001d8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1c6      	bne.n	8001cca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	6839      	ldr	r1, [r7, #0]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 fbd9 	bl	80024f8 <SPI_EndRxTxTransaction>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10a      	bne.n	8001d70 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b088      	sub	sp, #32
 8001d9a:	af02      	add	r7, sp, #8
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	4613      	mov	r3, r2
 8001da4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
 8001db4:	e104      	b.n	8001fc0 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_SPI_Receive+0x2c>
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0fc      	b.n	8001fc0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dce:	d112      	bne.n	8001df6 <HAL_SPI_Receive+0x60>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10e      	bne.n	8001df6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2204      	movs	r2, #4
 8001ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f8eb 	bl	8001fc8 <HAL_SPI_TransmitReceive>
 8001df2:	4603      	mov	r3, r0
 8001df4:	e0e4      	b.n	8001fc0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001df6:	f7fe fe51 	bl	8000a9c <HAL_GetTick>
 8001dfa:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_SPI_Receive+0x74>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e0da      	b.n	8001fc0 <HAL_SPI_Receive+0x22a>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2204      	movs	r2, #4
 8001e16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	88fa      	ldrh	r2, [r7, #6]
 8001e2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e58:	d10f      	bne.n	8001e7a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e84:	2b40      	cmp	r3, #64	@ 0x40
 8001e86:	d007      	beq.n	8001e98 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d170      	bne.n	8001f82 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ea0:	e035      	b.n	8001f0e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d115      	bne.n	8001edc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f103 020c 	add.w	r2, r3, #12
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001eda:	e018      	b.n	8001f0e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001edc:	f7fe fdde 	bl	8000a9c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d803      	bhi.n	8001ef4 <HAL_SPI_Receive+0x15e>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef2:	d102      	bne.n	8001efa <HAL_SPI_Receive+0x164>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e058      	b.n	8001fc0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1c4      	bne.n	8001ea2 <HAL_SPI_Receive+0x10c>
 8001f18:	e038      	b.n	8001f8c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d113      	bne.n	8001f50 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f32:	b292      	uxth	r2, r2
 8001f34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3a:	1c9a      	adds	r2, r3, #2
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f4e:	e018      	b.n	8001f82 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f50:	f7fe fda4 	bl	8000a9c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d803      	bhi.n	8001f68 <HAL_SPI_Receive+0x1d2>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f66:	d102      	bne.n	8001f6e <HAL_SPI_Receive+0x1d8>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e01e      	b.n	8001fc0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1c6      	bne.n	8001f1a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	6839      	ldr	r1, [r7, #0]
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fa4b 	bl	800242c <SPI_EndRxTransaction>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
  }
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fda:	f7fe fd5f 	bl	8000a9c <HAL_GetTick>
 8001fde:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fe6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ff2:	7ffb      	ldrb	r3, [r7, #31]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d00c      	beq.n	8002012 <HAL_SPI_TransmitReceive+0x4a>
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ffe:	d106      	bne.n	800200e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <HAL_SPI_TransmitReceive+0x46>
 8002008:	7ffb      	ldrb	r3, [r7, #31]
 800200a:	2b04      	cmp	r3, #4
 800200c:	d001      	beq.n	8002012 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
 8002010:	e17f      	b.n	8002312 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_SPI_TransmitReceive+0x5c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_SPI_TransmitReceive+0x5c>
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e174      	b.n	8002312 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_SPI_TransmitReceive+0x6e>
 8002032:	2302      	movs	r3, #2
 8002034:	e16d      	b.n	8002312 <HAL_SPI_TransmitReceive+0x34a>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b04      	cmp	r3, #4
 8002048:	d003      	beq.n	8002052 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2205      	movs	r2, #5
 800204e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	887a      	ldrh	r2, [r7, #2]
 8002062:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002092:	2b40      	cmp	r3, #64	@ 0x40
 8002094:	d007      	beq.n	80020a6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ae:	d17e      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_SPI_TransmitReceive+0xf6>
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d16c      	bne.n	8002198 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	881a      	ldrh	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	1c9a      	adds	r2, r3, #2
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020e2:	e059      	b.n	8002198 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d11b      	bne.n	800212a <HAL_SPI_TransmitReceive+0x162>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d016      	beq.n	800212a <HAL_SPI_TransmitReceive+0x162>
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d113      	bne.n	800212a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	881a      	ldrh	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	1c9a      	adds	r2, r3, #2
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d119      	bne.n	800216c <HAL_SPI_TransmitReceive+0x1a4>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d014      	beq.n	800216c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214c:	b292      	uxth	r2, r2
 800214e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002154:	1c9a      	adds	r2, r3, #2
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002168:	2301      	movs	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800216c:	f7fe fc96 	bl	8000a9c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002178:	429a      	cmp	r2, r3
 800217a:	d80d      	bhi.n	8002198 <HAL_SPI_TransmitReceive+0x1d0>
 800217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002182:	d009      	beq.n	8002198 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0bc      	b.n	8002312 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1a0      	bne.n	80020e4 <HAL_SPI_TransmitReceive+0x11c>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d19b      	bne.n	80020e4 <HAL_SPI_TransmitReceive+0x11c>
 80021ac:	e082      	b.n	80022b4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_SPI_TransmitReceive+0x1f4>
 80021b6:	8afb      	ldrh	r3, [r7, #22]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d171      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	330c      	adds	r3, #12
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e2:	e05d      	b.n	80022a0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d11c      	bne.n	800222c <HAL_SPI_TransmitReceive+0x264>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d017      	beq.n	800222c <HAL_SPI_TransmitReceive+0x264>
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d114      	bne.n	800222c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d119      	bne.n	800226e <HAL_SPI_TransmitReceive+0x2a6>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d014      	beq.n	800226e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800226a:	2301      	movs	r3, #1
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800226e:	f7fe fc15 	bl	8000a9c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800227a:	429a      	cmp	r2, r3
 800227c:	d803      	bhi.n	8002286 <HAL_SPI_TransmitReceive+0x2be>
 800227e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d102      	bne.n	800228c <HAL_SPI_TransmitReceive+0x2c4>
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e038      	b.n	8002312 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d19c      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x21c>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d197      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022b4:	6a3a      	ldr	r2, [r7, #32]
 80022b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f91d 	bl	80024f8 <SPI_EndRxTxTransaction>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e01d      	b.n	8002312 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002310:	2300      	movs	r3, #0
  }
}
 8002312:	4618      	mov	r0, r3
 8002314:	3728      	adds	r7, #40	@ 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800232c:	f7fe fbb6 	bl	8000a9c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4413      	add	r3, r2
 800233a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800233c:	f7fe fbae 	bl	8000a9c <HAL_GetTick>
 8002340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002342:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	015b      	lsls	r3, r3, #5
 8002348:	0d1b      	lsrs	r3, r3, #20
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002352:	e055      	b.n	8002400 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235a:	d051      	beq.n	8002400 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800235c:	f7fe fb9e 	bl	8000a9c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	429a      	cmp	r2, r3
 800236a:	d902      	bls.n	8002372 <SPI_WaitFlagStateUntilTimeout+0x56>
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d13d      	bne.n	80023ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800238a:	d111      	bne.n	80023b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002394:	d004      	beq.n	80023a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800239e:	d107      	bne.n	80023b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b8:	d10f      	bne.n	80023da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e018      	b.n	8002420 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	e002      	b.n	8002400 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4013      	ands	r3, r2
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	429a      	cmp	r2, r3
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	429a      	cmp	r2, r3
 800241c:	d19a      	bne.n	8002354 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000000 	.word	0x20000000

0800242c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002440:	d111      	bne.n	8002466 <SPI_EndRxTransaction+0x3a>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800244a:	d004      	beq.n	8002456 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002454:	d107      	bne.n	8002466 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800246e:	d12a      	bne.n	80024c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002478:	d012      	beq.n	80024a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2200      	movs	r2, #0
 8002482:	2180      	movs	r1, #128	@ 0x80
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff ff49 	bl	800231c <SPI_WaitFlagStateUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d02d      	beq.n	80024ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e026      	b.n	80024ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff ff36 	bl	800231c <SPI_WaitFlagStateUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01a      	beq.n	80024ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ba:	f043 0220 	orr.w	r2, r3, #32
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e013      	b.n	80024ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2101      	movs	r1, #1
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff23 	bl	800231c <SPI_WaitFlagStateUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e000      	b.n	80024ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2201      	movs	r2, #1
 800250c:	2102      	movs	r1, #2
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff ff04 	bl	800231c <SPI_WaitFlagStateUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251e:	f043 0220 	orr.w	r2, r3, #32
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e032      	b.n	8002590 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800252a:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <SPI_EndRxTxTransaction+0xa0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1b      	ldr	r2, [pc, #108]	@ (800259c <SPI_EndRxTxTransaction+0xa4>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	0d5b      	lsrs	r3, r3, #21
 8002536:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002548:	d112      	bne.n	8002570 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	2180      	movs	r1, #128	@ 0x80
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff fee1 	bl	800231c <SPI_WaitFlagStateUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d016      	beq.n	800258e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002564:	f043 0220 	orr.w	r2, r3, #32
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e00f      	b.n	8002590 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3b01      	subs	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002586:	2b80      	cmp	r3, #128	@ 0x80
 8002588:	d0f2      	beq.n	8002570 <SPI_EndRxTxTransaction+0x78>
 800258a:	e000      	b.n	800258e <SPI_EndRxTxTransaction+0x96>
        break;
 800258c:	bf00      	nop
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000000 	.word	0x20000000
 800259c:	165e9f81 	.word	0x165e9f81

080025a0 <memset>:
 80025a0:	4402      	add	r2, r0
 80025a2:	4603      	mov	r3, r0
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d100      	bne.n	80025aa <memset+0xa>
 80025a8:	4770      	bx	lr
 80025aa:	f803 1b01 	strb.w	r1, [r3], #1
 80025ae:	e7f9      	b.n	80025a4 <memset+0x4>

080025b0 <__libc_init_array>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	4d0d      	ldr	r5, [pc, #52]	@ (80025e8 <__libc_init_array+0x38>)
 80025b4:	4c0d      	ldr	r4, [pc, #52]	@ (80025ec <__libc_init_array+0x3c>)
 80025b6:	1b64      	subs	r4, r4, r5
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	2600      	movs	r6, #0
 80025bc:	42a6      	cmp	r6, r4
 80025be:	d109      	bne.n	80025d4 <__libc_init_array+0x24>
 80025c0:	4d0b      	ldr	r5, [pc, #44]	@ (80025f0 <__libc_init_array+0x40>)
 80025c2:	4c0c      	ldr	r4, [pc, #48]	@ (80025f4 <__libc_init_array+0x44>)
 80025c4:	f000 f818 	bl	80025f8 <_init>
 80025c8:	1b64      	subs	r4, r4, r5
 80025ca:	10a4      	asrs	r4, r4, #2
 80025cc:	2600      	movs	r6, #0
 80025ce:	42a6      	cmp	r6, r4
 80025d0:	d105      	bne.n	80025de <__libc_init_array+0x2e>
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
 80025d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d8:	4798      	blx	r3
 80025da:	3601      	adds	r6, #1
 80025dc:	e7ee      	b.n	80025bc <__libc_init_array+0xc>
 80025de:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e2:	4798      	blx	r3
 80025e4:	3601      	adds	r6, #1
 80025e6:	e7f2      	b.n	80025ce <__libc_init_array+0x1e>
 80025e8:	08002628 	.word	0x08002628
 80025ec:	08002628 	.word	0x08002628
 80025f0:	08002628 	.word	0x08002628
 80025f4:	0800262c 	.word	0x0800262c

080025f8 <_init>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	bf00      	nop
 80025fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fe:	bc08      	pop	{r3}
 8002600:	469e      	mov	lr, r3
 8002602:	4770      	bx	lr

08002604 <_fini>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	bf00      	nop
 8002608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260a:	bc08      	pop	{r3}
 800260c:	469e      	mov	lr, r3
 800260e:	4770      	bx	lr
